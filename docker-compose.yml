version: '3.3'
services:
  web:
    image: maxiplux/livemarket.business.b2bcart:1.0.4
    volumes:
      - ./composeexample:/code
    environment:
      POSTGRESQL_ADDRESS: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRESQL_DATABASE : postgres
      POSTGRESQL_USERNAME: postgres
      DATABASE_PORT : 5432
      MONGO_DATABASE: mongo
      MONGO_HOST: mongo
      MONGO_USERNAME: mongo
    ports:
      - "8080:8080"
    links:
      - postgres
      - mongo
      - redis
    depends_on:
      - postgres
  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
  mongo:
    image: 'bitnami/mongodb:latest'
    restart: on-failure
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    ports:
      - "27017:27017"
  redis:
    image: redis:5.0.7
    restart: on-failure
    ports:
      - '6379:6379'
  kafka:
    image: johnnypark/kafka-zookeeper
    restart: on-failure
    environment:
      NUM_PARTITIONS: 3
      ADVERTISED_HOST: 127.0.0.1
    ports:
      - '9092:9092'
      - '2181:2181'
volumes:
  dbdata:
# this compomse no has it https://thepracticaldeveloper.com/2017/12/11/dockerize-spring-boot/ , but  that exmaple is beautiful because implements scale
#  ./kafka-topics.sh --create --topic test-deposit -zookeeper localhost:2181 --replication-factor 1 --partitions 3
#  ./kafka-console-producer.sh --broker-list localhost:9092 --topic test-deposit
#  ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-deposit  --from-beginning
